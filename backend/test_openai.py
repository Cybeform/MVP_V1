#!/usr/bin/env python3
"""
Script de test pour v√©rifier la configuration OpenAI
"""
import os
import sys
from dotenv import load_dotenv

def test_openai_connection():
    """Test de connexion √† OpenAI"""
    print("üîç Test de configuration OpenAI")
    print("=" * 50)
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # V√©rifier la cl√© API
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå Cl√© API OpenAI non trouv√©e dans .env")
        return False
    
    print(f"‚úÖ Cl√© API trouv√©e: {api_key[:20]}...")
    
    try:
        # Import OpenAI
        from openai import OpenAI
        print("‚úÖ Module OpenAI import√© avec succ√®s")
        
        # Cr√©er le client avec seulement la cl√© API
        client = OpenAI(api_key=api_key)
        print("‚úÖ Client OpenAI cr√©√© avec succ√®s")
        
        # Test de connexion
        print("üîç Test de connexion √† l'API...")
        models = client.models.list()
        print(f"‚úÖ Connexion r√©ussie! {len(models.data)} mod√®les disponibles")
        
        # V√©rifier GPT-4o
        model_names = [model.id for model in models.data]
        if 'gpt-4o' in model_names:
            print("‚úÖ Mod√®le GPT-4o disponible")
        else:
            print("‚ö†Ô∏è  GPT-4o non disponible, mod√®les GPT disponibles:")
            gpt_models = [m for m in model_names if 'gpt' in m.lower()][:5]
            for model in gpt_models:
                print(f"   - {model}")
        
        # Test simple d'extraction
        print("\nüß™ Test d'extraction simple...")
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",  # Utiliser le mod√®le mini pour le test
                messages=[
                    {"role": "system", "content": "Tu es un assistant expert en construction."},
                    {"role": "user", "content": "Extrait les mat√©riaux de ce texte: 'Pose de carrelage en gr√®s c√©rame 30x30 cm, joint √©poxy.'"}
                ],
                max_tokens=100
            )
            print("‚úÖ Test d'extraction r√©ussi!")
            print(f"R√©ponse: {response.choices[0].message.content}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur test extraction: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        print(f"Type d'erreur: {type(e).__name__}")
        return False

if __name__ == "__main__":
    success = test_openai_connection()
    sys.exit(0 if success else 1) 